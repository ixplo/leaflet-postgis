{"ast":null,"code":"import * as L from 'leaflet';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction AppComponent_option_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const layer_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", layer_r1.properties.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", layer_r1.properties.id, \" \");\n  }\n}\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(http) {\n      this.http = http;\n      this.currentLayer = null;\n      this.layers = [];\n      this.selectedLayerName = '';\n    }\n    ngAfterViewInit() {\n      this.map = L.map('map').setView([27.95, -82.45], 11);\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        maxZoom: 19,\n        attribution: '© OpenStreetMap contributors'\n      }).addTo(this.map);\n      // Load GeoJSON multi-line data from assets\n      this.http.get('http://localhost:3000/api/multilines').subscribe(geoData => {\n        this.layers = geoData.features;\n        if (this.layers.length > 0) {\n          this.selectedLayerName = this.layers[0].properties.id;\n          this.updateLayer();\n        }\n      }, error => {\n        console.error('Error loading GeoJSON data:', error);\n      });\n    }\n    updateLayer() {\n      if (!this.map) return;\n      if (this.currentLayer) {\n        this.map.removeLayer(this.currentLayer);\n      }\n      const feature = this.layers.find(f => f.properties.id === this.selectedLayerName);\n      if (feature) {\n        this.currentLayer = L.geoJSON(feature, {\n          style: {\n            color: 'blue',\n            weight: 4\n          }\n        }).addTo(this.map);\n        this.map.fitBounds(this.currentLayer.getBounds());\n      }\n    }\n    onLayerChange(event) {\n      this.selectedLayerName = event.target.value;\n      this.updateLayer();\n    }\n    static {\n      this.ɵfac = function AppComponent_Factory(t) {\n        return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: AppComponent,\n        selectors: [[\"app-root\"]],\n        decls: 7,\n        vars: 2,\n        consts: [[\"for\", \"layer-select\"], [\"id\", \"layer-select\", 3, \"ngModel\", \"change\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"id\", \"map\"], [3, \"value\"]],\n        template: function AppComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"h2\");\n            i0.ɵɵtext(1, \"PostGIS Multi-Line Map Demo\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(2, \"label\", 0);\n            i0.ɵɵtext(3, \"Select Layer:\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(4, \"select\", 1);\n            i0.ɵɵlistener(\"change\", function AppComponent_Template_select_change_4_listener($event) {\n              return ctx.onLayerChange($event);\n            })(\"ngModelChange\", function AppComponent_Template_select_ngModelChange_4_listener($event) {\n              return ctx.selectedLayerName = $event;\n            });\n            i0.ɵɵtemplate(5, AppComponent_option_5_Template, 2, 2, \"option\", 2);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(6, \"div\", 3);\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngModel\", ctx.selectedLayerName);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngForOf\", ctx.layers);\n          }\n        },\n        dependencies: [i2.NgForOf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgModel]\n      });\n    }\n  }\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}